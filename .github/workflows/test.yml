name: Test and lint

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events for master
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python: [3.7, 3.x]
        include:
        - os: ubuntu-latest
          pip_cache: ~/.cache/pip
          poetry_cache: ~/.local
        - os: macos-latest
          pip_cache: ~/Library/Caches/pip
          poetry_cache: ~/.local
        - os: windows-latest
          pip_cache: ~\AppData\Local\pip\Cache
          poetry_cache: ~/.local

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python }} # optional, default is 3.x

      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ${{ matrix.poetry_cache }}
          key: poetry-0  # increment to reset cache

      - name: Install Poetry
        uses: snok/install-poetry@v1

      # - name: Cache pip
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ matrix.pip_cache }}
      #     # Look to see if there is a cache hit for the corresponding pyproject.toml file (where dependencies are defined)
      #     key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      #       ${{ runner.os }}-

      - name: Load cached venv
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install via Poetry
        run: poetry install --no-interaction

      - name: Test
        # TODO: add --flake8
        run: poetry run pytest --ignore=examples/adaptive_ctrl_ldsctrlest.ipynb
